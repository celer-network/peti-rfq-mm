// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: service/rfq/user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserApiClient is the client API for UserApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserApiClient interface {
	GetConfigs(ctx context.Context, in *GetConfigsRequest, opts ...grpc.CallOption) (*GetConfigsResponse, error)
	// gets prices from all market makers and returns the one with the highest amount out
	Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// performs a "firm quote" at the MM using a price that is previously signed by the MM
	// this API causes market maker to freeze up their fund therefore should only be used when necessary
	// returns ERROR_PRICE_DEADLINE if the valid_thru in Price has passed
	Quote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	GetMarketMakers(ctx context.Context, in *GetMarketMakersRequest, opts ...grpc.CallOption) (*GetMarketMakersResponse, error)
	GetRefundExecMsgCallData(ctx context.Context, in *GetRefundExecMsgCallDataRequest, opts ...grpc.CallOption) (*GetRefundExecMsgCallDataResponse, error)
}

type userApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserApiClient(cc grpc.ClientConnInterface) UserApiClient {
	return &userApiClient{cc}
}

func (c *userApiClient) GetConfigs(ctx context.Context, in *GetConfigsRequest, opts ...grpc.CallOption) (*GetConfigsResponse, error) {
	out := new(GetConfigsResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) Quote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error) {
	out := new(QuoteResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) GetMarketMakers(ctx context.Context, in *GetMarketMakersRequest, opts ...grpc.CallOption) (*GetMarketMakersResponse, error) {
	out := new(GetMarketMakersResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/GetMarketMakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) GetRefundExecMsgCallData(ctx context.Context, in *GetRefundExecMsgCallDataRequest, opts ...grpc.CallOption) (*GetRefundExecMsgCallDataResponse, error) {
	out := new(GetRefundExecMsgCallDataResponse)
	err := c.cc.Invoke(ctx, "/service.rfq.UserApi/GetRefundExecMsgCallData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserApiServer is the server API for UserApi service.
// All implementations should embed UnimplementedUserApiServer
// for forward compatibility
type UserApiServer interface {
	GetConfigs(context.Context, *GetConfigsRequest) (*GetConfigsResponse, error)
	// gets prices from all market makers and returns the one with the highest amount out
	Price(context.Context, *PriceRequest) (*PriceResponse, error)
	// performs a "firm quote" at the MM using a price that is previously signed by the MM
	// this API causes market maker to freeze up their fund therefore should only be used when necessary
	// returns ERROR_PRICE_DEADLINE if the valid_thru in Price has passed
	Quote(context.Context, *QuoteRequest) (*QuoteResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	GetMarketMakers(context.Context, *GetMarketMakersRequest) (*GetMarketMakersResponse, error)
	GetRefundExecMsgCallData(context.Context, *GetRefundExecMsgCallDataRequest) (*GetRefundExecMsgCallDataResponse, error)
}

// UnimplementedUserApiServer should be embedded to have forward compatible implementations.
type UnimplementedUserApiServer struct {
}

func (UnimplementedUserApiServer) GetConfigs(context.Context, *GetConfigsRequest) (*GetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigs not implemented")
}
func (UnimplementedUserApiServer) Price(context.Context, *PriceRequest) (*PriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (UnimplementedUserApiServer) Quote(context.Context, *QuoteRequest) (*QuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (UnimplementedUserApiServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedUserApiServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedUserApiServer) GetMarketMakers(context.Context, *GetMarketMakersRequest) (*GetMarketMakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketMakers not implemented")
}
func (UnimplementedUserApiServer) GetRefundExecMsgCallData(context.Context, *GetRefundExecMsgCallDataRequest) (*GetRefundExecMsgCallDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundExecMsgCallData not implemented")
}

// UnsafeUserApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserApiServer will
// result in compilation errors.
type UnsafeUserApiServer interface {
	mustEmbedUnimplementedUserApiServer()
}

func RegisterUserApiServer(s grpc.ServiceRegistrar, srv UserApiServer) {
	s.RegisterService(&UserApi_ServiceDesc, srv)
}

func _UserApi_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetConfigs(ctx, req.(*GetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).Price(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).Quote(ctx, req.(*QuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_GetMarketMakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketMakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetMarketMakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/GetMarketMakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetMarketMakers(ctx, req.(*GetMarketMakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_GetRefundExecMsgCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundExecMsgCallDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetRefundExecMsgCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.rfq.UserApi/GetRefundExecMsgCallData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetRefundExecMsgCallData(ctx, req.(*GetRefundExecMsgCallDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserApi_ServiceDesc is the grpc.ServiceDesc for UserApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.rfq.UserApi",
	HandlerType: (*UserApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigs",
			Handler:    _UserApi_GetConfigs_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _UserApi_Price_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _UserApi_Quote_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _UserApi_GetOrders_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _UserApi_GetHistory_Handler,
		},
		{
			MethodName: "GetMarketMakers",
			Handler:    _UserApi_GetMarketMakers_Handler,
		},
		{
			MethodName: "GetRefundExecMsgCallData",
			Handler:    _UserApi_GetRefundExecMsgCallData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rfq/user.proto",
}
