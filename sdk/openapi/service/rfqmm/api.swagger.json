{
  "swagger": "2.0",
  "info": {
    "title": "service/rfqmm/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "api"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/rfqmm/price": {
      "post": {
        "operationId": "api_Price",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicerfqmmPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicerfqmmPriceRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    },
    "/v1/rfqmm/quote": {
      "post": {
        "operationId": "api_Quote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicerfqmmQuoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicerfqmmQuoteRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    },
    "/v1/rfqmm/sign": {
      "post": {
        "operationId": "api_Sign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rfqmmSignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rfqmmSignRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    },
    "/v1/rfqmm/signQuoteHash": {
      "post": {
        "operationId": "api_SignQuoteHash",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rfqmmSignQuoteHashResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rfqmmSignQuoteHashRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    },
    "/v1/rfqmm/tokens": {
      "post": {
        "operationId": "api_Tokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rfqmmTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rfqmmTokensRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    },
    "/v1/rfqmm/verify": {
      "post": {
        "operationId": "api_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rfqmmVerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rfqmmVerifyRequest"
            }
          }
        ],
        "tags": [
          "api"
        ]
      }
    }
  },
  "definitions": {
    "commonErr": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "commonToken": {
      "type": "object",
      "properties": {
        "chainId": {
          "type": "string",
          "format": "uint64"
        },
        "symbol": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "logoUri": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rfqmmPrice": {
      "type": "object",
      "properties": {
        "srcToken": {
          "$ref": "#/definitions/commonToken"
        },
        "srcAmount": {
          "type": "string",
          "title": "src_amount reflects the total amount of src_token the user should deposit in the contract on \nthe src chain it should include rfq protocol fee + msg fee + mm charged fee"
        },
        "dstToken": {
          "$ref": "#/definitions/commonToken"
        },
        "srcReleaseAmount": {
          "type": "string"
        },
        "dstAmount": {
          "type": "string"
        },
        "feeAmount": {
          "type": "string",
          "title": "fee = mm fee + msg fee + src tx gas cost + dst tx gas cost"
        },
        "validThru": {
          "type": "string",
          "format": "int64",
          "title": "unix epoch milliseconds. the time before which the price response is valid for Quote"
        },
        "mmAddr": {
          "type": "string"
        },
        "sig": {
          "type": "string",
          "description": "sig(hash('rfq price', mm_addr, valid_thru, src_chain_id, token_in, amount_in, dst_chain_id, token_out, amount_out))\nwhen calling Quote(), mm uses this signature to verify the price content is agreed by them previously\nand is not beyond deadline."
        },
        "srcDepositPeriod": {
          "type": "string",
          "format": "int64",
          "title": "the maximum src deposit period that is expected by mm, will be started from the time when mm receives the quote request"
        },
        "dstTransferPeriod": {
          "type": "string",
          "format": "int64",
          "title": "the minimum dst transfer period that is expected by mm, will be started from the time when mm receives the quote request"
        }
      }
    },
    "rfqmmQuote": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "title": "the quote hash"
        },
        "srcToken": {
          "$ref": "#/definitions/commonToken",
          "title": "the input token amount on the src chain"
        },
        "srcAmount": {
          "type": "string"
        },
        "srcReleaseAmount": {
          "type": "string",
          "title": "the token amount (same token as src_token) that the market maker will receive by filling this quote"
        },
        "dstToken": {
          "$ref": "#/definitions/commonToken",
          "title": "the token amount out on the dst chain to be received by the user"
        },
        "dstAmount": {
          "type": "string"
        },
        "srcDeadline": {
          "type": "string",
          "format": "int64",
          "title": "the deadline before which the user can submit on the src chain"
        },
        "dstDeadline": {
          "type": "string",
          "format": "int64",
          "title": "the time after which the order is eligible for refund"
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "title": "nonce that is determined by the server that is used to dedup quotes"
        },
        "sender": {
          "type": "string",
          "title": "sender of the src tx (msg.sender). it's also the user who deposits the src fund"
        },
        "receiver": {
          "type": "string",
          "title": "the receiver of the token on the dst chain"
        },
        "refundTo": {
          "type": "string",
          "title": "the receiver of the refund (if any) on the src chain"
        },
        "mmAddr": {
          "type": "string",
          "title": "the address of the liquidity provider who's going to transfer fund to the user on the dst chain"
        }
      },
      "title": "some of the fields map to the Quote struct in the RFQ contract"
    },
    "rfqmmSignQuoteHashRequest": {
      "type": "object",
      "properties": {
        "quote": {
          "$ref": "#/definitions/rfqmmQuote"
        },
        "srcDepositTxHash": {
          "type": "string"
        },
        "quoteSig": {
          "type": "string"
        }
      }
    },
    "rfqmmSignQuoteHashResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rfqmmSignRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rfqmmSignResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rfqmmTokensRequest": {
      "type": "object"
    },
    "rfqmmTokensResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonToken"
          }
        }
      }
    },
    "rfqmmVerifyRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rfqmmVerifyResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "servicerfqmmPriceRequest": {
      "type": "object",
      "properties": {
        "srcToken": {
          "$ref": "#/definitions/commonToken"
        },
        "dstToken": {
          "$ref": "#/definitions/commonToken"
        },
        "srcAmount": {
          "type": "string"
        },
        "dstAmount": {
          "type": "string"
        },
        "dstNative": {
          "type": "boolean",
          "title": "indicates whether the user wants native token on the dst chain (only applicable if the dst token is a native wrap)"
        }
      }
    },
    "servicerfqmmPriceResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "price": {
          "$ref": "#/definitions/rfqmmPrice",
          "description": "if receiveAmount is specified in the request, it would be the price of receiveToken in sendToken and vice versa."
        }
      }
    },
    "servicerfqmmQuoteRequest": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/rfqmmPrice"
        },
        "quote": {
          "$ref": "#/definitions/rfqmmQuote"
        },
        "dstNative": {
          "type": "boolean",
          "title": "indicates whether the user wants native token on the dst chain (only applicable if the dst token is a native wrap)"
        }
      }
    },
    "servicerfqmmQuoteResponse": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/commonErr"
        },
        "quoteSig": {
          "type": "string"
        }
      }
    }
  }
}
